{"version":3,"sources":["serviceWorker.js","components/RoboCard.js","components/RoboCardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constant.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","RoboCard","props","state","isFlipped","handleClick","bind","e","preventDefault","this","setState","prevState","flipDirection","Card","style","width","height","backgroundColor","CardImg","top","src","id","alt","CardBody","CardTitle","name","CardSubtitle","email","Button","onClick","color","CardText","street","suite","city","zipcode","website","React","Component","divStyle","marginTop","RoboCardList","robots","cardComponent","map","user","i","Col","sm","address","Container","fluid","Row","SearchBox","searchfield","searchChange","className","type","placeholder","onChange","Scroll","overflowY","border","children","ErrorBoundary","hasError","error","errorInfo","App","onRequestRobots","console","log","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLocaleLowerCase","includes","textAlign","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.da43993a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactCardFlip from 'react-card-flip';\nimport {\n  Card, Button, CardImg, CardTitle, CardText,\n  CardSubtitle, CardBody, \n} from 'reactstrap';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nclass RoboCard extends React.Component {\n    constructor(props) {\n      super();\n        this.state = {\n        isFlipped: false\n      };\n      this.handleClick = this.handleClick.bind(this);\n    }\n   \n    handleClick(e) {\n      e.preventDefault();\n      this.setState(prevState => ({ isFlipped: !prevState.isFlipped }));\n    }\n    \n    render () {\n      return (\n        <ReactCardFlip isFlipped={this.state.isFlipped} flipDirection=\"vertical\">\n                <div >\n                    <Card style={{width: 250, height: 450, backgroundColor: '#009999'}}>\n                        <CardImg top width=\"100%\"   src={`https://robohash.org/${this.props.id}?100x100`} alt=\"robots\" />\n                        <CardBody>\n                            <CardTitle>{this.props.name} </CardTitle>\n                            <CardSubtitle>{this.props.email}</CardSubtitle>\n                            <Button onClick={this.handleClick} color=\"primary\">Profile </Button>\n                        </CardBody>\n                    </Card>\n                </div>\n                <div >\n                    <Card style={{width: 250, height: 450, backgroundColor: 'powderblue'}}>\n                        <CardBody>\n                            <h5>Name</h5><CardTitle>{this.props.name}</CardTitle>\n                            <h5>Email</h5><CardSubtitle>{this.props.email}</CardSubtitle>\n                            <h5>Address</h5>\n                            <CardText>{this.props.street} </CardText>\n                            <CardText>{this.props.suite} </CardText>\n                            <CardText>{this.props.city} </CardText>\n                            <CardText>{this.props.zipcode} </CardText>\n                            <h5>Website</h5>\n                            <CardText>{this.props.website} </CardText>\n                            <Button onClick={this.handleClick} color=\"primary\">Picture</Button>\n                        </CardBody>\n                    </Card>\n                </div>\n        </ReactCardFlip>\n      )\n    }\n  }\n\n  export default RoboCard;\n","import React from 'react';\nimport RoboCard from './RoboCard';\n\nimport {\n     Container, Row, Col \n  } from 'reactstrap';\n\nconst divStyle = {\n    marginTop: '10px',\n};\n\nconst RoboCardList = ({robots}) => {\n    /*if(true){  // see errors in dev mode\n      throw new Error('Nooooooo');\n    }*/\n    const cardComponent = robots.map((user, i) => {\n        return (\n            <Col sm=\"3\" style={divStyle}> \n                <RoboCard  id={robots[i].id} name= {robots[i].name} email={robots[i].email} street= {robots[i].address.street } suite= {robots[i].address.suite} city= {robots[i].address.city} zipcode= {robots[i].address.zipcode} website= {robots[i].website}/> \n            </Col>\n        )\n    })\n    return (\n      <Container fluid>\n        <Row> \n                { cardComponent }\n        </Row> \n      </Container>\n    );\n}\n\nexport default RoboCardList;","import React from 'react';\nimport { Container } from 'reactstrap';\n\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n    return(\n            <div>\n                <Container className=\"themed-container\" fluid=\"sm\">\n                    <input \n                        type='search' \n                        placeholder='search robots' \n                        style={{backgroundColor: '#669999'}} \n                        onChange= { searchChange }\n                    />\n                </Container>\n            </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\n\nconst Scroll = (props) => {\n    return(\n        <div style={{overflowY: 'scroll', border:'1px solid black', height:'500px'}}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(error, errorInfo) {\n        this.setState({ hasError: true})\n    }\n    render() {\n        if(this.state.hasError){\n            return <h1>Ooops.  That is not good</h1>;\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","import React, { Component} from 'react';\nimport { connect } from 'react-redux'\nimport RoboCardList from '../components/RoboCardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport './App.css';\nimport { setSearchField, requestRobots} from '../actions'\n\nconst mapStateToProps = state =>{\n    return{\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n    }\n}\nconst mapDispatchToProps = (dispatch)=>{\n    return{\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\nclass  App extends Component {\n    componentDidMount(){\n       this.props.onRequestRobots();\n       console.log(this.props)\n    }\n    render(){\n        const { searchField , onSearchChange, robots, isPending} = this.props;\n        const filteredRobots = robots.filter(robot =>{\n            return robot.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase());\n        });\n\n        return isPending ?\n             <h1>Loading...</h1> :\n            (\n                <div style={{textAlign: \"center\"}}>\n                    <h1 className=\"text-center\">Robo friends</h1>\n                    <SearchBox searchChange= {onSearchChange}/>\n                    <Scroll>\n                            <ErrorBoundary>\n                                <RoboCardList robots= { filteredRobots } />\n                            </ErrorBoundary>\n                    </Scroll>\n                </div>\n            );\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD,\n        REQUEST_ROBOTS_PENDING, \n        REQUEST_ROBOTS_SUCCESS, \n        REQUEST_ROBOTS_FAILED\n                            } from './constant.js'\n\nexport const setSearchField = (text) => {  //setSearchField returns an object  =(text)=>{....}\n    console.log(text);\n    return{\n        type: CHANGE_SEARCH_FIELD,\n        payload: text\n    }\n}\n\n//export const requestRobots =(dispatch) =>{  \nexport const requestRobots =()=> (dispatch) =>{  //requestRobots returns a function =()=>(dispatch){....}\n    dispatch({type: REQUEST_ROBOTS_PENDING});\n    fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => response.json())\n        .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n        .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\n        \n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n\n","import { CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING, \n    REQUEST_ROBOTS_SUCCESS, \n    REQUEST_ROBOTS_FAILED\n                        } from './constant.js'\n\nconst initialStateSearch = {\n    searchField: ''\n}\nexport const searchRobots = (state=initialStateSearch, action={} )=> {\n    console.log(action.type);\n    switch(action.type){\n        case CHANGE_SEARCH_FIELD:\n            return Object.assign({}, state, {searchField: action.payload})\n        default:\n            return state;\n    }\n}\n\nconst initialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\nexport const requestRobots = ( state = initialStateRobots, action= {} )=>{\n\n    switch(action.type){\n        case REQUEST_ROBOTS_PENDING: \n                return Object.assign({}, state, {isPending: true })\n        case REQUEST_ROBOTS_SUCCESS:\n                return Object.assign({}, state, {robots: action.payload, isPending: false })\n        case REQUEST_ROBOTS_FAILED: \n                return Object.assign({}, state, {error: action.payload, isPending: false })\n        default:\n                return state;\n    }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware , combineReducers} from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './containers/App';\nimport { searchRobots, requestRobots } from './reducers';\n\n//import RoboCardList from './RoboCardList';\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store =  createStore(rootReducer, applyMiddleware(thunkMiddleware,logger))\nReactDOM.render(\n  <React.StrictMode>\n      <script src=\"https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react.min.js\"></script>\n      <script src=\"https://cdnjs.cloudflare.com/ajax/libs/react/15.1.0/react-dom.min.js\"></script>\n      <Provider store= {store}>\n           <App />  \n      </Provider> \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}